#!/usr/local/bin/node

'use strict';

var _ = require('lodash');
var express = require('express');
var app = express();
var config = require('../config');
var querystring = require('querystring');

app.use(express.logger());
app.use(express.compress());
app.use(express.json());
app.use(express.urlencoded());

var passport = require('../lib/passport');
app.use(passport.initialize());


// apply app config //

_.each(config.app, function(v,k) { app.set(k,v); });


// Volos OAuth //

var oauthConfig = config.oauth.config || {};
oauthConfig.validGrantTypes = [ 'client_credentials', 'authorization_code', 'implicit_grant', 'password' ];
oauthConfig.passwordCheck = checkPassword;
oauthConfig.beforeCreateToken = beforeCreateToken;
var oauthCore = config.oauth.provider.create(oauthConfig);
var oauth = oauthCore.expressMiddleware();

app.get('/volos/authorize', oauth.handleAuthorize());
app.post('/volos/accesstoken', oauth.handleAccessToken());
app.post('/volos/invalidate', oauth.invalidateToken());
app.post('/volos/refresh', oauth.refreshToken());
//app.use(oauth.authenticate());


// authentication routes //

// local login (uses Volos OAuth)
app.post('/login', function(req, res) {
  var creds = config.registration.app;
  req.body.grant_type = 'password';
  req.body.client_id = creds.key;
  req.body.client_secret = creds.secret;
  req.body.scope = 'mycart';
  oauth.handleAccessToken()(req, res);
});

// passport routes - allow user creation and login from facebook / twitter
app.get('/auth/facebook',          passport.authenticate('facebook', { scope: ['email'] }));
app.get('/auth/facebook/callback', passportCallback('facebook'));

app.get('/auth/google',            passport.authenticate('google', { scope: ['email'] }));
app.get('/auth/google/callback',   passportCallback('google'));

// requires session support - ick
//app.get('/auth/twitter',           passport.authenticate('twitter'));
//app.get('/auth/twitter/callback',  passportCallback('twitter'));

app.get('/auth/local', passport.authenticate('local'));


// application routes (uses volos oauth) //

app.use(express.static(__dirname + '/../client'));

var cart = require('../cart')(config);
cart.routes(app, oauth);

var user = require('../user')(config);
user.routes(app, oauth);

var catalog = require('../catalog')(config);
catalog.routes(app, oauth);


// start express //

app.listen(app.get('port'), function() {
  printInstructions();
});
module.exports = app;


// utility & integration functions //

function passportCallback(provider) {
  return function(req, res, next) {
    passport.authenticate(provider, function(err, user) {
      if (err) { return next(err); }
      if (!user) { return res.redirect(oauthCallback); }
      var username = user.get('username');
      getVolosToken(username, function(err, reply) { // we'll use a volos token, not provider's
        if (err) { return next(err); }
        var params = { username: username, accessToken: reply.access_token };
        var qs = querystring.stringify(params);
        return res.redirect('/oauth2callback.html?' + qs);
      });
    })(req, res, next);
  };
}

function getVolosToken(username, cb) {
  var creds = config.registration.app;
  var body = {
    grant_type: 'client_credentials',
    client_id: creds.key,
    client_secret: creds.secret,
    username: username, // for reference - we'll store it in the attributes
    scope: 'mycart'
  };
  oauthCore.generateToken(body, cb);
}

// store the username with the token
function beforeCreateToken(parsedBody, options, next) {
  if (parsedBody.username) {
    var attributes = { username: parsedBody.username };
    options.attributes = attributes;
  }
  next();
}


// todo: create a configurable integration point for external user management
// todo: include requested scopes and return granted ones?
// use Usergrid as the user store and let it check the passwords
function checkPassword(username, password, cb) {
  user.User.getAccessToken(username, password, cb);
}

function printInstructions() {
  var creds = config.registration.app;
  var defaultUser = config.registration.defaultUser;

  var body = {
    grant_type: 'password',
    client_id: creds.key,
    client_secret: creds.secret,
    username: defaultUser.username,
    password: defaultUser.password,
    scope: 'user cart mycart'
  };
  oauthCore.generateToken(body, function(err, reply) {
    if (err) {
      console.log("Uh oh. Looks like your registration process didn't go well. There's no default user.");
      throw err;
    }

    console.log();
    console.log('All ready!');
    console.log("Express listening on port %d in %s mode", app.get('port'), app.settings.env);
    console.log();
    console.log('This command will get you a token for cart, user, and myuser scopes for the default user:');
    console.log();
    console.log('curl -X POST "http://localhost:%d/accesstoken" -d ' +
      '"grant_type=password&client_id=%s&client_secret=%s&scope=user%20cart%20mycart&username=%s&password=%s"\n',
      app.get('port'), encodeURIComponent(creds.key), encodeURIComponent(creds.secret), defaultUser.username,
      defaultUser.password);

    console.log('Or use a token I got for you. It is scoped for access to all APIs. Just start your curl commands like so:');
    console.log();
    console.log('curl -H "Authorization: Bearer %s" "http://localhost:%d/', reply.access_token, app.get('port'));
  });
}
